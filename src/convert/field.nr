use dep::std::option::Option;

use dep::rontosoft::globals::MINUS;
use dep::rontosoft::globals::BYTE_NULL;
use dep::rontosoft::JSON;

#[test]
unconstrained
fn convert_bytes_array_as_field()
{
    let bytes : [u8] = [0x34, 0x32, 0x39, 0x33, 0x38, 0x36, 0x37, 0x35, 0x31, 0x30];
    let result = bytes.asField();

    assert(result.unwrap() == 4293867510);
}

#[test]
unconstrained
fn convert_bytes_minus_array_as_field()
{
    let bytes : [u8] = [MINUS, 0x34, 0x32, 0x39, 0x33, 0x38, 0x36, 0x37, 0x35, 0x31, 0x30];
    let result = bytes.asField();

    assert(result.unwrap() == -4293867510);
}

#[test]
unconstrained
fn convert_bytes_array_with_nulls_as_field()
{
    let bytes : [u8] = [0x34, 0x32, 0x39, 0x33, 0x38];
    let result = bytes.asField();

    assert(result.unwrap() == 42938);
}

#[test]
unconstrained
fn convert_bytes_array_value_overflows_as_field()
{
    // max (Field) + 1
    let bytes : [u8] = [0x32,0x31,0x38,0x38,0x38,0x32,0x34,0x32,0x38,0x37,0x31,0x38,0x33,0x39,0x32,0x37,0x35,0x32,0x32,0x32,0x32,0x34,0x36,0x34,0x30,0x35,0x37,0x34,0x35,0x32,0x35,0x37,0x32,0x37,0x35,0x30,0x38,0x38,0x35,0x34,0x38,0x33,0x36,0x34,0x34,0x30,0x30,0x34,0x31,0x36,0x30,0x33,0x34,0x33,0x34,0x33,0x36,0x39,0x38,0x32,0x30,0x34,0x31,0x38,0x36,0x35,0x37,0x35,0x38,0x30,0x38,0x34,0x39,0x35,0x36,0x31,0x38];
    let result = bytes.asField();

    assert(result.unwrap() == 1);
}

#[test]
unconstrained
fn convert_bytes_array_with_leading_null_as_field()
{
    let bytes : [u8] = [BYTE_NULL, 0x34, 0x39, 0x36];

    assert(bytes.asField().is_none() == true);
}

#[test]
unconstrained
fn convert_bytes_array_with_sparse_digits_as_field()
{
    let bytes : [u8] = [0x34, 0x32, BYTE_NULL, 0x34, 0x39, 0x36, BYTE_NULL, BYTE_NULL, BYTE_NULL, BYTE_NULL];

    assert(bytes.asField().is_none() == true);
}
